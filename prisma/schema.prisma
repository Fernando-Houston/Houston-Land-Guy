// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("USER")
  
  accounts      Account[]
  sessions      Session[]
  profile       UserProfile?
  savedSearches SavedSearch[]
  portfolio     PortfolioProperty[]
  activities    UserActivity[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserProfile {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  userType      String   @default("INVESTOR") // DEVELOPER, INVESTOR, SELLER, AGENT, LENDER
  company       String?
  license       String?
  bio           String?
  phone         String?
  website       String?
  
  preferences   Json     @default("{}")
  watchlist     String[] @default([])
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([userId])
}

model SavedSearch {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  name          String
  criteria      Json
  alertsEnabled Boolean  @default(true)
  lastRun       DateTime @default(now())
  resultCount   Int      @default(0)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([userId])
}

model PortfolioProperty {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  propertyId    String
  purchasePrice Float
  purchaseDate  DateTime
  currentValue  Float?
  notes         String?
  status        String   @default("owned")
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([userId])
}

model UserActivity {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type          String   // property_view, search, analysis, report_download, share
  propertyId    String?
  metadata      Json?
  timestamp     DateTime @default(now())
  
  @@index([userId])
  @@index([type])
  @@index([timestamp])
}

// Models
model Lead {
  id              String       @id @default(cuid())
  email           String       @unique
  phone           String?
  name            String?
  company         String?
  source          LEAD_SOURCE
  status          LEAD_STATUS  @default(NEW)
  score           Int          @default(0)
  
  // Lead interests
  neighborhoods   String[]
  projectTypes    PROJECT_TYPE[]
  budgetMin       Float?
  budgetMax       Float?
  timeline        String?
  message         String?
  
  // Tracking
  utmSource       String?
  utmMedium       String?
  utmCampaign     String?
  referrer        String?
  
  // Timestamps
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  lastContactedAt DateTime?
  
  // Relations
  interactions    Interaction[]
  calculatorResults CalculatorResult[]
  
  @@index([email])
  @@index([status])
  @@index([source])
  @@index([createdAt])
}

model Interaction {
  id          String   @id @default(cuid())
  leadId      String
  lead        Lead     @relation(fields: [leadId], references: [id])
  type        String   // e.g., "page_view", "tool_use", "form_submission"
  details     Json     // Flexible JSON field for interaction-specific data
  createdAt   DateTime @default(now())
  
  @@index([leadId])
  @@index([type])
  @@index([createdAt])
}

model CalculatorResult {
  id              String   @id @default(cuid())
  leadId          String?
  lead            Lead?    @relation(fields: [leadId], references: [id])
  
  // Calculator inputs
  calculatorType  String   // "roi", "financing", "feasibility"
  inputs          Json     // All calculator inputs
  
  // Results
  roi             Float?
  totalCost       Float?
  projectedProfit Float?
  timeline        String?
  risks           Json?    // Risk assessment data
  
  // Tracking
  sessionId       String?
  completed       Boolean  @default(false)
  createdAt       DateTime @default(now())
  
  @@index([leadId])
  @@index([calculatorType])
  @@index([createdAt])
}

model MarketData {
  id            String   @id @default(cuid())
  neighborhood  String
  dataType      String   // "permits", "trends", "demographics"
  data          Json     // Flexible JSON field for various data types
  source        String   // "core_agents", "census", etc.
  lastUpdated   DateTime @default(now())
  
  @@unique([neighborhood, dataType])
  @@index([neighborhood])
  @@index([dataType])
  @@index([lastUpdated])
}

// Enums
enum LEAD_STATUS {
  NEW
  QUALIFIED
  CONTACTED
  CONVERTED
}

enum LEAD_SOURCE {
  ROI_CALCULATOR
  MARKET_REPORT
  NEWSLETTER
  DIRECT_CONTACT
  HERO_FORM
  CONSULTATION_FORM
  DEVELOPERS_PAGE
  SELLERS_PAGE
  INVESTORS_PAGE
  financing_calculator
  zoning_explorer
  market_intelligence_dashboard
  development_timeline
}

enum PROJECT_TYPE {
  SINGLE_FAMILY
  MULTI_FAMILY
  TOWNHOME
  CONDO
  MIXED_USE
  COMMERCIAL
}

// Fernando-X Memory Models
model FernandoMemory {
  id            String   @id @default(cuid())
  userId        String?  // Optional - for user-specific memories
  sessionId     String?  // Optional - for session-specific memories
  
  memoryType    String   // "conversation", "fact", "preference", "context"
  content       Json     // The actual memory content
  embedding     Float[]  // Vector embedding for similarity search
  metadata      Json?    // Additional metadata
  
  importance    Float    @default(0.5) // 0-1 score
  accessCount   Int      @default(0)
  lastAccessed  DateTime @default(now())
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([userId])
  @@index([sessionId])
  @@index([memoryType])
  @@index([importance])
  @@index([lastAccessed])
}

model FernandoConversation {
  id            String   @id @default(cuid())
  userId        String?
  sessionId     String
  
  messages      Json[]   // Array of messages
  summary       String?  @db.Text
  topics        String[]
  sentiment     String?  // "positive", "neutral", "negative"
  
  startedAt     DateTime @default(now())
  endedAt       DateTime?
  duration      Int?     // in seconds
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([userId])
  @@index([sessionId])
  @@index([startedAt])
}

model FernandoInsight {
  id            String   @id @default(cuid())
  
  insightType   String   // "market", "property", "user_behavior", "trend"
  title         String
  content       String   @db.Text
  data          Json     // Supporting data
  confidence    Float    // 0-1 confidence score
  
  tags          String[]
  relevantTo    String[] // User IDs or segments this is relevant to
  
  validFrom     DateTime @default(now())
  validUntil    DateTime?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([insightType])
  @@index([confidence])
  @@index([validFrom])
}